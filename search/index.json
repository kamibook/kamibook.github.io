[{"content":"关闭原防火墙 操作环境\n• Almalinux9\n1 2 systemctl stop firewalld systemctl disable firewalld 安装iptables-services 1 2 3 yum install iptables-services -y #安装iptables systemctl start iptables #启动 systemctl enable iptables #开机启动 开启端口（非必须） 1 2 iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 10000:50000 -j ACCEPT iptables -I INPUT -m state --state NEW -m udp -p udp --dport 10000:50000 -j ACCEPT 创建用户 1 2 3 4 5 useradd -r a1 useradd -r a2 useradd -r a3 useradd -r a4 useradd -r a5 修改用户源IP 1 iptables -t nat -A POSTROUTING -m owner --uid-owner a1 -j SNAT --to-source 1.1.1.1 备注：以该用户启动的程序，TCP出网IP为设定的IP，一般情况不支持UDP。\n保存规则 1 service iptables save ","date":"2023-10-15T00:00:00Z","permalink":"https://kamibook.com/p/iptablessnat/","title":"Iptables：修改源IP"},{"content":"Golang 跨平台编译 简介 Golang作为一个跨平台编程语言，提供了简易用的方式进行跨平台编译，以下将介绍如何在Linux系统上编译生成多个平台的可执行程序。\n准备工作 操作环境\n• Golang\n• Linux x86_64\n设置环境变量 1 2 3 CGO_ENABLED=0 // 禁用CGO GOOS=windows // 目标平台是windows GOARCH=amd64 // 目标处理器架构是amd64 编译 1 go build 其它平台 查询Golang支持的平台跟架构\n1 go tool dist list 输出\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 aix/ppc64 android/386 android/amd64 android/arm android/arm64 darwin/amd64 darwin/arm64 dragonfly/amd64 freebsd/386 freebsd/amd64 freebsd/arm freebsd/arm64 illumos/amd64 ios/amd64 ios/arm64 js/wasm linux/386 linux/amd64 linux/arm linux/arm64 linux/loong64 linux/mips linux/mips64 linux/mips64le linux/mipsle linux/ppc64 linux/ppc64le linux/riscv64 linux/s390x netbsd/386 netbsd/amd64 netbsd/arm netbsd/arm64 openbsd/386 openbsd/amd64 openbsd/arm openbsd/arm64 openbsd/mips64 plan9/386 plan9/amd64 plan9/arm solaris/amd64 windows/386 windows/amd64 windows/arm windows/arm64 Windows平台终端设置变量 PowerShell 1 2 3 $env:CGO_ENABLED=\u0026#34;0\u0026#34; $env:GOOS=\u0026#34;linux\u0026#34; $env:GOARCH=\u0026#34;amd64\u0026#34; CMD 1 2 3 SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 ","date":"2023-10-12T00:00:00Z","permalink":"https://kamibook.com/p/golang/","title":"Golang跨平台编译"},{"content":"简介 交叉编译就是在一个平台上可以编译生成另一个平台的可执行文件。主要介绍如何在Linux系统上编译生成多个系统的可执行文件。\n准备工作 操作环境\n• Rust\n• Linux x86_64\n添加Target 首先查询支持的Target 已安装会在后面显示(installed)。\n1 rustup target list 得出以下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 aarch64-apple-darwin aarch64-apple-ios aarch64-apple-ios-sim aarch64-linux-android aarch64-pc-windows-msvc aarch64-unknown-fuchsia aarch64-unknown-linux-gnu aarch64-unknown-linux-musl aarch64-unknown-none aarch64-unknown-none-softfloat aarch64-unknown-uefi arm-linux-androideabi arm-unknown-linux-gnueabi arm-unknown-linux-gnueabihf arm-unknown-linux-musleabi arm-unknown-linux-musleabihf armebv7r-none-eabi armebv7r-none-eabihf armv5te-unknown-linux-gnueabi armv5te-unknown-linux-musleabi armv7-linux-androideabi armv7-unknown-linux-gnueabi armv7-unknown-linux-gnueabihf armv7-unknown-linux-musleabi armv7-unknown-linux-musleabihf armv7a-none-eabi armv7r-none-eabi armv7r-none-eabihf asmjs-unknown-emscripten i586-pc-windows-msvc i586-unknown-linux-gnu i586-unknown-linux-musl i686-linux-android i686-pc-windows-gnu i686-pc-windows-msvc i686-unknown-freebsd i686-unknown-linux-gnu i686-unknown-linux-musl i686-unknown-uefi loongarch64-unknown-linux-gnu mips-unknown-linux-musl mips64-unknown-linux-muslabi64 mips64el-unknown-linux-muslabi64 mipsel-unknown-linux-musl nvptx64-nvidia-cuda powerpc-unknown-linux-gnu powerpc64-unknown-linux-gnu powerpc64le-unknown-linux-gnu riscv32i-unknown-none-elf riscv32imac-unknown-none-elf riscv32imc-unknown-none-elf riscv64gc-unknown-linux-gnu riscv64gc-unknown-none-elf riscv64imac-unknown-none-elf s390x-unknown-linux-gnu sparc64-unknown-linux-gnu sparcv9-sun-solaris thumbv6m-none-eabi thumbv7em-none-eabi thumbv7em-none-eabihf thumbv7m-none-eabi thumbv7neon-linux-androideabi thumbv7neon-unknown-linux-gnueabihf thumbv8m.base-none-eabi thumbv8m.main-none-eabi thumbv8m.main-none-eabihf wasm32-unknown-emscripten wasm32-unknown-unknown wasm32-wasi wasm32-wasi-preview1-threads x86_64-apple-darwin x86_64-apple-ios x86_64-fortanix-unknown-sgx x86_64-linux-android x86_64-pc-solaris x86_64-pc-windows-gnu x86_64-pc-windows-msvc x86_64-sun-solaris x86_64-unknown-freebsd x86_64-unknown-fuchsia x86_64-unknown-illumos x86_64-unknown-linux-gnu x86_64-unknown-linux-gnux32 x86_64-unknown-linux-musl x86_64-unknown-netbsd x86_64-unknown-none x86_64-unknown-redox x86_64-unknown-uefi 添加 1 rustup target add x86_64-unknown-linux-musl 编译 1 cargo build --release --target=x86_64-unknown-linux-musl ","date":"2023-10-12T00:00:00Z","permalink":"https://kamibook.com/p/rust/","title":"RUST跨平台编译"},{"content":"作者GITHUB 简单示例 1 2 3 4 5 6 7 8 9 10 11 12 13 PS D:\\bin\u0026gt; ./rnp.exe 1.1.1.1:22 Rnp - r12f (r12f.com, github.com/r12f) - A simple layer 4 ping tool for cloud. Start testing TCP 1.1.1.1:22: Reaching TCP 1.1.1.1:22 from 192.168.31.86:18485 succeeded: RTT=23.80ms Reaching TCP 1.1.1.1:22 from 192.168.31.86:18486 succeeded: RTT=23.83ms Reaching TCP 1.1.1.1:22 from 192.168.31.86:18487 succeeded: RTT=20.84ms Reaching TCP 1.1.1.1:22 from 192.168.31.86:18488 succeeded: RTT=24.95ms === Connect statistics for TCP 1.1.1.1:22 === - Connects: Sent = 4, Succeeded = 4, Failed = 0 (0.00%). - Round trip time: Minimum = 20.84ms, Maximum = 24.95ms, Average = 23.35ms. PS D:\\bin\u0026gt; 多线程并发并省略输出 1 2 3 4 5 6 7 8 9 10 PS D:\\bin\u0026gt; ./rnp.exe 1.1.1.1:22 -p 10 -n 100 -q Rnp - r12f (r12f.com, github.com/r12f) - A simple layer 4 ping tool for cloud. Start testing TCP 1.1.1.1:22: 100 pings finished. === Connect statistics for TCP 1.1.1.1:22 === - Connects: Sent = 100, Succeeded = 100, Failed = 0 (0.00%). - Round trip time: Minimum = 17.49ms, Maximum = 28.72ms, Average = 23.27ms. PS D:\\bin\u0026gt; 参数\n1 2 3 -p 10 #设置线程数，默认1 -n 100 # 设置PING数，默认4 -q #设置省略PING输出，默认全部输出 ","date":"2023-10-11T00:00:00Z","permalink":"https://kamibook.com/p/rnp/","title":"PING工具：RNP"},{"content":"Linux HTTP PROXY 1 export ALL_PROXY=http://127.0.0.1:1080 SOCKS5 PROXY 1 export ALL_PROXY=socks5://127.0.0.1:1080 取消代理 1 2 unset http_proxy unset https_proxy Windows PowerShell 1 $env:ALL_PROXY=\u0026#34;http://127.0.0.1:7890\u0026#34; 取消代理\n1 $env:ALL_PROXY=\u0026#34;\u0026#34; CMD 1 2 set http_proxy=http://127.0.0.1:1080 set https_proxy=http://127.0.0.1:1080 取消代理\n1 2 set http_proxy= set https_proxy= 认证 适用于以上全部\nhttp://127.0.0.1:1080 改为 http://user:pass@127.0.0.1:1080\n注意：部分软件是不走该Proxy，需要根据软件另行设置。 ","date":"2023-10-11T00:00:00Z","permalink":"https://kamibook.com/p/httpproxy/","title":"终端简易设置代理"}]